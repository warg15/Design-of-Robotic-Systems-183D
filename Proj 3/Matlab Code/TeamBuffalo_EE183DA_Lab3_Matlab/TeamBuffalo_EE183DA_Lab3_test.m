%% EE 183DA Lab 3 Test Code
% Team Buffalo
% Markov Decision Processes (MDPs)
clc; clear all; close all;

%% Test matrix plot

rgb_1 = [1 1 1 1 1 1;...
         1 1 1 1 0 1;...
         1 1 1 1 1 1;...
         1 1 1 1 1 1;...
         1 1 1 1 1 1;...
         1 1 1 1 1 1];
rgb_2 = [0 0 0 0 0 0;...
         0 1 1 1 1 0;...
         0 1 1 1 1 0;...
         0 1 1 1 1 0;...
         0 1 1 1 1 0;...
         0 0 0 0 0 0];
rgb_3 = [0 0 0 0 0 0;...
         0 1 1 0 0 0;...
         0 1 1 0 1 0;...
         0 1 1 1 1 0;...
         0 1 1 1 1 0;...
         0 0 0 0 0 0];
gw_reward = [-100 -100 -100 -100 -100 -100;...
             -100 0    0    -10  1    -100;...
             -100 0    0    -10  0    -100;...
             -100 0    0    0    0    -100;...
             -100 0    0    0    0    -100;...
             -100 -100 -100 -100 -100 -100];
rgb = cat(3,rgb_1,rgb_2,rgb_3);

figure(1);
hold on;
gridWorld = imshow(rgb,'InitialMagnification','fit');
set(gca,'ticklabelinterpreter','latex');
title('Grid World','interpreter','latex');

[rows,cols,deps] = pe_power(rgb);
for gw_x = 1:rows
    for gw_y = 1:cols
        text(gw_y,gw_x,num2str(gw_reward(gw_x,gw_y)),...
            'HorizontalAlignment','center','VerticalAlignment','middle');
    end
end
hold off;

%% Test pe
% initialization of pe
pe = .125;
pe_power = 0;
pe_m = [];
% calculate array size needed to account for pe's # of digits after decimal point
while(floor(pe*10^pe_power) ~= pe*10^pe_power)
   pe_power = pe_power + 1; 
end
% create an array to store movements based on pe
for i = 1:pe*power(10,pe_power)
    pe_m = [pe_m 1 -1];
end
pe_m = [pe_m zeros(1,power(10,pe_power) - 2*pe*power(10,pe_power))];

fprintf('number of 1 = %d\n',sum(pe_m(:) == 1));
fprintf('number of 0 = %d\n',sum(pe_m(:) == 0));
fprintf('number of -1 = %d\n',sum(pe_m(:) == -1));

%% Test map

gw_reward = [-100 -100 -100 -100 -100 -100;...
             -100 0    0    -10  1    -100;...
             -100 0    0    -10  0    -100;...
             -100 0    0    0    0    -100;...
             -100 0    0    0    0    -100;...
             -100 -100 -100 -100 -100 -100];
         
% expend the reward matrix to 12 headings 3D matrix space
[rows,cols] = size(gw_reward);
for x = 1:rows
    for y = 1:cols
        for h = 1:12
            map(x,y,h) = gw_reward(x,y);
        end
    end
end